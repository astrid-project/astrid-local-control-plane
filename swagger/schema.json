{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "code",
      "description": "Code injection at run-time."
    },
    {
      "name": "config",
      "description": "Configuration at run-time."
    },
    {
      "name": "status",
      "description": "Status data of the LCP."
    }
  ],
  "paths": {
    "/code/{id}": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeRequest"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Code injection executed.",
            "schema": {
              "$ref": "#/definitions/CodeResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeRequest"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Code injection executed.",
            "schema": {
              "$ref": "#/definitions/CodeResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeRequest"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Code injection executed.",
            "schema": {
              "$ref": "#/definitions/CodeResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/config": {
      "post": {
        "summary": "Configuration update",
        "description": "Apply configuration changes to the local environment.",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConfigRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration changes executed.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConfigResponse"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    },
    "/status": {
      "get": {},
      "post": {
        "summary": "Status set.",
        "description": "Set the last heartbeat.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/HTTPError"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Local Control Plane",
    "version": "38d7a241e58adb8644144fc7201688addb15dbbe@master"
  },
  "swagger": "2.0",
  "definitions": {
    "CodeRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "firewall",
          "description": "Code name."
        },
        "source": {
          "type": "string",
          "description": "Code source"
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "CodeResultResponse": {
      "type": "object",
      "properties": {
        "warning": {
          "type": "string",
          "example": "Useless properties: id",
          "description": "Warning message."
        }
      }
    },
    "CodeResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeResultResponse"
          }
        },
        "when": {
          "type": "string",
          "format": "date-time",
          "example": "2020/02/13 15:27:06",
          "description": "Datetime of the configuration changes."
        }
      },
      "required": [
        "results",
        "when"
      ]
    },
    "HTTPError": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title error",
          "example": "400 Bad Request"
        },
        "description": {
          "type": "string",
          "description": "Human readable message that describes the error.",
          "example": "The request body is not a valid JSON or it is not encoded as UTF-8."
        }
      },
      "required": [
        "description",
        "title"
      ]
    },
    "ConfigParameterRequest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "period",
            "description": "Key path."
          }
        },
        "value": {
          "type": "string",
          "example": "10s",
          "description": "Parameter new value."
        },
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "yaml",
            "properties"
          ],
          "example": "yaml",
          "description": "Scheme."
        },
        "source": {
          "type": "string",
          "example": "filebeat.yml",
          "description": "Source filename."
        }
      },
      "required": [
        "schema",
        "source",
        "value"
      ]
    },
    "ConfigActionRequest": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "string",
          "description": "Command."
        },
        "daemon": {
          "type": "string",
          "example": "firewall",
          "description": "Key used to execute the command as daemon."
        },
        "args": {
          "type": "string",
          "example": "-al",
          "description": "Single command argument."
        }
      },
      "required": [
        "cmd"
      ]
    },
    "ConfigResourceRequest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "example": "filebeat.yml",
          "description": "File path"
        },
        "content": {
          "type": "string",
          "description": "Resource content."
        }
      },
      "required": [
        "content",
        "path"
      ]
    },
    "ConfigRequest": {
      "type": "object",
      "properties": {
        "parameters": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigParameterRequest"
          }
        },
        "actions": {
          "description": "List of actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigActionRequest"
          }
        },
        "resources": {
          "description": "List of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigResourceRequest"
          }
        }
      }
    },
    "ConfigResultResponse": {
      "type": "object",
      "properties": {}
    },
    "ConfigResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigResultResponse"
          }
        },
        "when": {
          "type": "string",
          "format": "date-time",
          "example": "2020/02/13 15:27:06",
          "description": "Datetime of the configuration changes"
        }
      },
      "required": [
        "results",
        "when"
      ]
    },
    "StatusResponse": {
      "type": "object",
      "properties": {
        "last_heartbeat": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:33",
          "description": "Timestamp of the expiration of the API access configuration."
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the LCP is started"
        },
        "password": {
          "type": "string",
          "description": "Password for the CB to connect to this LCP."
        },
        "id": {
          "type": "string",
          "example": "apache",
          "description": "ID of the execution environment."
        },
        "username": {
          "type": "string",
          "description": "Username for the CB to connect to this LCP."
        }
      },
      "required": [
        "id",
        "last_heartbeat",
        "started"
      ]
    }
  }
}